{"version":3,"sources":["webpack:///./src/Components/Form.tsx","webpack:///./src/Contact/Contact.tsx"],"names":[],"mappings":"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","file":"Contact.js","sourcesContent":["import React from \"react\";\r\n\r\n/**\r\n * Field Form\r\n * @author Mufid Jamaluddin\r\n */\r\ninterface FieldModel \r\n{ \r\n    // Tambahan Kelas HTML\r\n    className?:string; \r\n\r\n    // Label Field\r\n    label:string; \r\n\r\n    // name Field\r\n    name:string; \r\n\r\n    // type \r\n    type:string;\r\n\r\n    // pattern validation \r\n    pattern?:string; \r\n\r\n    // error validation\r\n    error?:string; \r\n\r\n    // success validation\r\n    success?:string \r\n}\r\n\r\nexport class Field extends React.Component<FieldModel>\r\n{\r\n    /**\r\n     * Custom HTML Class \r\n     */\r\n    private getHtmlClassName() : string\r\n    {\r\n        let str = \"input-field col \";\r\n\r\n        str.concat(this.props.className || \"s12\");\r\n\r\n        return str;\r\n    }\r\n\r\n    private getJsxInput() : JSX.Element\r\n    {\r\n        if(this.props.pattern)\r\n        {\r\n            return (\r\n                <input type={this.props.type} name={this.props.name} pattern={this.props.pattern} className=\"validate\"></input>\r\n            )\r\n        }\r\n        else\r\n        {\r\n            return (\r\n                <input type={this.props.type} name={this.props.name}></input>\r\n            )\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Render Field\r\n     */\r\n    public render()\r\n    {\r\n        if(this.props.success && this.props.error)\r\n        {\r\n            return (\r\n                <div className={ this.getHtmlClassName() }>\r\n                    { this.getJsxInput() }\r\n                    <label>{this.props.label}</label>\r\n                    <span className=\"helper-text\" data-error={ this.props.error } data-success={ this.props.success }></span>\r\n                </div>\r\n            )\r\n        }\r\n        else\r\n        {\r\n            return (\r\n                <div className={ this.getHtmlClassName() }>\r\n                    { this.getJsxInput() }\r\n                    <label>{this.props.label}</label>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Form Materialize dengan Serialize\r\n * \r\n * @author Mufid Jamaluddin\r\n */\r\ninterface FormModel { className?:string; action?:string; method?:string }\r\ninterface FormStateModel { error:Array<string> }\r\n\r\nexport class Form extends React.Component<FormModel, FormStateModel>\r\n{\r\n    readonly state:FormStateModel = { error: [] };\r\n    \r\n    constructor(props:Readonly<FormModel>)\r\n    {\r\n        super(props);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Menghandle Submit Form\r\n     * @param event Event Klik Form\r\n     */\r\n    private onSubmit(event: React.FormEvent<HTMLFormElement>)\r\n    {\r\n        event.preventDefault();\r\n        const form:HTMLFormElement = event.currentTarget;\r\n        const data = new FormData(form);\r\n        \r\n        let obj = this;\r\n\r\n        if(this.props.action)\r\n        {\r\n            this.state.error.length = 0;\r\n            \r\n            fetch(this.props.action, {\r\n                method: this.props.method || \"POST\",\r\n                body: data\r\n            }).catch(function(error){\r\n                obj.state.error.push(error.statusText);\r\n            });\r\n        }\r\n        else\r\n        {\r\n            console.log(data);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Render Form\r\n     */\r\n    public render()\r\n    {\r\n        this.state.error.map(function(value){\r\n            M.toast({html: value})\r\n        });\r\n\r\n        return (\r\n            <form className={ this.props.className || \"container\" } onSubmit={ this.onSubmit }>\r\n                <div className=\"row\">\r\n                    { this.props.children }\r\n                </div>\r\n            </form>\r\n        )\r\n    }\r\n}","import * as React from \"react\";\r\nimport { Form, Field } from '../Components/Form';\r\n\r\n/**\r\n * Halaman Contact\r\n * @author Mufid Jamaluddin\r\n */\r\nclass Contact extends React.Component\r\n{\r\n    render()\r\n    {\r\n        document.title = \"Contact\";\r\n\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col s6\">\r\n                    <h1>Contact Page</h1>\r\n                    <p>\r\n                    It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).\r\n                    </p>                \r\n                </div>\r\n                <div className=\"col s6\">\r\n                    <Form>\r\n                        <Field name=\"email\" type=\"email\" label=\"email\" success=\"Valid\" error=\"The Email Format is Wrong\"></Field>\r\n                        <Field name=\"message\" type=\"text\" label=\"Message\"></Field>\r\n                        <button className=\"waves-effect waves-light btn\" type=\"submit\">Send</button>\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Contact;"],"sourceRoot":""}